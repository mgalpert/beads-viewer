{"id":"bd-271","title":"Epic: Git-Based Auto-Sync for Multi-Device Support","description":"Implement git-based auto-sync to enable multi-device workflows while maintaining beads' local-first, lightweight philosophy. Build on existing JSONL export/import infrastructure and collision detection.","design":"See DESIGN-GIT-SYNC.md for comprehensive architectural design.\n\nCore principle: Git + JSONL remains source of truth. No required server. Optional lightweight sync gateway for users who want push-button multi-device support.","acceptance_criteria":"- Phase 1: Enhanced git-based sync (no server) completed\n- Phase 2: Optional bd serve gateway implemented\n- Phase 3: Client gateway integration working\n- Phase 4: Production-ready with CRDT conflict resolution\n- All existing functionality preserved (backward compatible)\n- Documentation complete\n\n---","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-16T10:02:59.720814-07:00","updated_at":"2025-10-16T10:04:29.95916-07:00","dependencies":[{"issue_id":"bd-271","depends_on_id":"bd-272","type":"parent-child","created_at":"2025-10-16T10:02:59.727247-07:00","created_by":"auto-import"},{"issue_id":"bd-271","depends_on_id":"bd-273","type":"parent-child","created_at":"2025-10-16T10:02:59.727888-07:00","created_by":"auto-import"},{"issue_id":"bd-271","depends_on_id":"bd-274","type":"parent-child","created_at":"2025-10-16T10:02:59.728337-07:00","created_by":"auto-import"},{"issue_id":"bd-271","depends_on_id":"bd-275","type":"parent-child","created_at":"2025-10-16T10:02:59.728924-07:00","created_by":"auto-import"},{"issue_id":"bd-271","depends_on_id":"bd-276","type":"parent-child","created_at":"2025-10-16T10:02:59.729629-07:00","created_by":"auto-import"},{"issue_id":"bd-271","depends_on_id":"bd-278","type":"parent-child","created_at":"2025-10-16T10:02:59.730198-07:00","created_by":"auto-import"},{"issue_id":"bd-271","depends_on_id":"bd-277","type":"parent-child","created_at":"2025-10-16T10:02:59.731828-07:00","created_by":"auto-import"},{"issue_id":"bd-271","depends_on_id":"bd-279","type":"parent-child","created_at":"2025-10-16T10:02:59.732564-07:00","created_by":"auto-import"}]}
{"id":"bd-272","title":"Phase 1: Implement bd sync command","description":"Create bd sync command to manually synchronize with git remote in a single operation.","design":"Command should:\n1. Export pending changes to JSONL\n2. Commit changes to git\n3. Pull from remote (with conflict resolution)\n4. Push local commits to remote\n\nWraps the entire sync workflow in one command for better UX.","acceptance_criteria":"- bd sync command implemented\n- Exports dirty changes to JSONL automatically\n- Commits to git with descriptive message\n- Pulls and handles merge conflicts\n- Auto-imports updated JSONL\n- Pushes to remote\n- Error handling for git failures\n- Tests cover success and failure scenarios\n- Documentation in README.md\n\n---","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-16T10:02:59.721242-07:00","updated_at":"2025-10-16T10:02:59.721242-07:00"}
{"id":"bd-273","title":"Phase 1: Implement bd daemon command","description":"Create bd daemon command to run background sync process with configurable interval.","design":"Daemon should:\n- Run in background (fork or systemd service)\n- Poll for changes at configurable interval (default: 5 minutes)\n- Export dirty issues to JSONL\n- Auto-commit if --auto-commit flag set\n- Auto-push if --auto-push flag set\n- Pull remote changes periodically\n- Auto-import when remote changes detected\n- Log sync activity\n\nCommand flags:\n- --interval=5m (sync check interval)\n- --auto-commit (automatically commit changes)\n- --auto-push (automatically push commits)\n- --stop (stop running daemon)\n- --status (show daemon status)","acceptance_criteria":"- bd daemon command implemented\n- Background process management working\n- Configurable sync interval\n- Auto-commit functionality\n- Auto-push functionality\n- PID file for process management\n- Graceful shutdown on SIGTERM\n- Logging to file or syslog\n- Status command shows daemon state\n- Tests for daemon lifecycle\n- Documentation in README.md\n\n---","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-16T10:02:59.721691-07:00","updated_at":"2025-10-16T10:02:59.721691-07:00"}
{"id":"bd-274","title":"Phase 1: Create enhanced git hooks examples","description":"Create comprehensive git hooks in examples/git-hooks/ for immediate sync without daemon.","design":"Hooks to create:\n1. post-commit: Force immediate export, amend commit with JSONL changes\n2. post-merge: Auto-import with collision resolution\n3. pre-push: Ensure JSONL is up-to-date\n4. post-checkout: Auto-import when switching branches\n\nInstallation script: examples/git-hooks/install.sh","acceptance_criteria":"- post-commit hook that auto-exports\n- post-merge hook that auto-imports with --resolve-collisions\n- pre-push hook validates JSONL is synced\n- post-checkout hook imports branch changes\n- install.sh script copies hooks to .git/hooks/\n- Documentation in examples/git-hooks/README.md\n- Hooks are executable\n- Error handling in all hooks\n- Tests verify hook behavior\n\n---","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T10:02:59.722165-07:00","updated_at":"2025-10-16T10:02:59.722165-07:00"}
{"id":"bd-275","title":"Phase 1: Implement three-way merge for conflicts","description":"Implement three-way merge algorithm to intelligently resolve conflicts by comparing base, local, and remote versions.","design":"Three-way merge logic:\n- Get base version from git history (last common ancestor)\n- Compare local vs base: if same, use remote (remote changed)\n- Compare remote vs base: if same, use local (local changed)\n- If both changed: mark as conflict for manual resolution\n\nField-by-field merging for Issue type:\n- title, description, design, acceptance_criteria, notes (text fields)\n- status, priority, issue_type (enum fields)\n- labels (set merge - union)\n- dependencies (set merge - union)\n\nReturn MergeResult with:\n- MergedVersion (auto-merged fields)\n- Conflicts (list of fields requiring manual resolution)","acceptance_criteria":"- ThreeWayMerge function implemented\n- GetLastSyncedVersion retrieves git base version\n- Field-by-field merge logic for all Issue fields\n- Union merge for labels and dependencies\n- Conflict detection for incompatible changes\n- MergeResult type defined\n- Integration with import collision detection\n- Tests cover all merge scenarios\n- Documentation in DESIGN-GIT-SYNC.md\n\n---","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-16T10:02:59.72284-07:00","updated_at":"2025-10-16T10:02:59.72284-07:00"}
{"id":"bd-276","title":"Phase 1: Add version vectors for causal ordering","description":"Add optional version vector metadata to Issues for detecting causal relationships and enabling better conflict resolution.","design":"Add sync_metadata to Issue JSON:\n```json\n{\n  \"sync_metadata\": {\n    \"version\": 3,\n    \"last_modified_by\": \"device-a\",\n    \"version_vector\": {\n      \"device-a\": 2,\n      \"device-b\": 1\n    }\n  }\n}\n```\n\nVersion vector tracks logical clock per device:\n- Incremented on each update\n- Used to determine causality (happened-before)\n- Enables automatic conflict resolution for concurrent edits\n\nOptional field - backward compatible with existing JSONL.","acceptance_criteria":"- SyncMetadata type defined\n- Version vector in Issue struct (optional)\n- Device ID generation and storage\n- Increment version on update\n- Version vector comparison functions\n- Causal ordering detection\n- Integration with collision detection\n- Backward compatible JSONL parsing\n- Tests for version vector logic\n- Documentation in DESIGN-GIT-SYNC.md\n\n---","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-16T10:02:59.723564-07:00","updated_at":"2025-10-16T10:02:59.723564-07:00"}
{"id":"bd-277","title":"Phase 1: Improve collision UX with interactive resolution","description":"Enhance collision handling UX with interactive prompts for users to choose resolution strategy.","design":"When collision detected during sync, prompt:\n```\n⚠ Collision detected on bd-10 (conflicting fields: priority, title)\n\nOptions:\n  1. Keep local change\n  2. Accept remote change\n  3. Remap remote to new ID (recommended)\n  4. Resolve manually\n\nChoose [1-4]:\n```\n\nAdd bd resolve command for manual resolution:\n- Opens editor with three-way diff\n- User edits merged version\n- Validates and applies resolution","acceptance_criteria":"- Interactive collision prompt implemented\n- User can choose resolution strategy\n- bd resolve command implemented\n- Three-way diff display in editor\n- Manual edit and apply workflow\n- Validation of resolved version\n- Tests for all resolution paths\n- Documentation in README.md\n\n---","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-16T10:02:59.724021-07:00","updated_at":"2025-10-16T10:02:59.724021-07:00"}
{"id":"bd-278","title":"Phase 1: Add sync state machine tracking","description":"Implement sync state tracking to show users current sync status and guide next actions.","design":"Sync states:\n- clean: DB = JSONL = Git (all synced)\n- dirty: DB ≠ JSONL (pending flush)\n- conflict: JSONL ≠ DB (collision detected)\n- ahead: Local commits not pushed\n- behind: Remote commits not pulled\n- diverged: Both ahead and behind\n\nAdd CheckSyncState() function that:\n- Checks dirty issues count\n- Runs git status to check ahead/behind\n- Compares JSONL hash with DB\n- Returns SyncState\n\nDisplay in bd status command.","acceptance_criteria":"- SyncState enum defined\n- CheckSyncState() implemented\n- Git status parsing (ahead/behind commits)\n- Dirty issues detection\n- JSONL hash comparison\n- bd status shows sync state\n- Color-coded status display\n- Guidance on next action\n- Tests for all states\n- Documentation in README.md\n\n---","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-16T10:02:59.724493-07:00","updated_at":"2025-10-16T10:02:59.724493-07:00"}
{"id":"bd-279","title":"Phase 1: Add tests for concurrent edit scenarios","description":"Create comprehensive test suite for concurrent editing scenarios across multiple devices.","design":"Test scenarios:\n1. Two devices edit different fields (should merge cleanly)\n2. Two devices edit same field (collision)\n3. One device edits closed issue (local wins)\n4. Race condition: simultaneous push (git handles)\n5. Three-way merge with base version\n6. Version vector causal ordering\n7. Union merge for labels\n8. Dependency conflict resolution\n\nUse test fixtures with pre-created git history.","acceptance_criteria":"- Test suite in cmd/bd/sync_test.go\n- All 8+ concurrent edit scenarios covered\n- Test fixtures with git history\n- Mock git operations where needed\n- Tests verify correct merge behavior\n- Tests verify collision detection\n- Tests run in CI\n- Documentation in test comments\n\n---","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-16T10:02:59.726166-07:00","updated_at":"2025-10-16T10:02:59.726166-07:00"}
{"id":"test-1","title":"Test issue 1","description":"","status":"blocked","priority":2,"issue_type":"task","created_at":"2025-10-15T10:24:30.826175-07:00","updated_at":"2025-10-15T18:52:04.403Z","closed_at":"2025-10-15T18:21:22.85Z"}
{"id":"test-10","title":"test new web ui","description":"","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-15T15:54:10.936713-07:00","updated_at":"2025-10-16T10:02:59.712835-07:00"}
{"id":"test-11","title":"Test ID generation","description":"","status":"in_progress","priority":2,"issue_type":"task","created_at":"2025-10-15T15:56:08.7424-07:00","updated_at":"2025-10-16T10:02:59.714341-07:00"}
{"id":"test-12","title":"Another test","description":"","status":"in_progress","priority":2,"issue_type":"task","created_at":"2025-10-15T15:56:13.887056-07:00","updated_at":"2025-10-16T10:02:59.714872-07:00"}
{"id":"test-13","title":"testing 1234","description":"","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-15T16:09:23.992284-07:00","updated_at":"2025-10-16T10:02:59.715315-07:00"}
{"id":"test-2","title":"Test issue 2","description":"Depends on test-1","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T10:24:30.834851-07:00","updated_at":"2025-10-16T10:02:59.71574-07:00","dependencies":[{"issue_id":"test-2","depends_on_id":"test-1","type":"blocks","created_at":"2025-10-15T10:24:30.843506-07:00","created_by":"contains"}]}
{"id":"test-3","title":"Implement user authentication","description":"Users should be able to log in and log out. Need to implement JWT-based authentication with refresh tokens.","design":"Use FastAPI with JWT tokens. Store refresh tokens in Redis. Use bcrypt for password hashing.","acceptance_criteria":"Users can register, log in, and protected routes require valid tokens","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-15T10:45:53.516742-07:00","updated_at":"2025-10-16T10:02:59.716198-07:00"}
{"id":"test-4","title":"Design database schema","description":"Create database schema for users and authentication tokens","design":"Users table: id, email, password_hash, created_at\nTokens table: id, user_id, refresh_token, expires_at","status":"in_progress","priority":1,"issue_type":"task","created_at":"2025-10-15T10:46:03.968455-07:00","updated_at":"2025-10-16T10:02:59.716632-07:00","dependencies":[{"issue_id":"test-4","depends_on_id":"test-3","type":"blocks","created_at":"2025-10-15T10:46:03.969337-07:00","created_by":"contains"}]}
{"id":"test-5","title":"API documentation","description":"Document all authentication endpoints in OpenAPI format","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T10:46:04.210879-07:00","updated_at":"2025-10-16T10:02:59.717061-07:00","external_ref":"gh-123","dependencies":[{"issue_id":"test-5","depends_on_id":"test-3","type":"related","created_at":"2025-10-15T10:46:04.211722-07:00","created_by":"contains"}]}
{"id":"test-6","title":"Test web UI integration","description":"Testing CLI-based backend","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-15T15:49:04.269352-07:00","updated_at":"2025-10-16T10:02:59.717503-07:00","closed_at":"2025-10-15T15:49:14.802246-07:00"}
{"id":"test-7","title":"Test external CLI change","description":"Created via bd CLI directly","status":"in_progress","priority":2,"issue_type":"task","created_at":"2025-10-15T15:49:22.836669-07:00","updated_at":"2025-10-16T10:02:59.71793-07:00"}
{"id":"test-8","title":"Test issue from integration test","description":"This is a test","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-15T15:50:18.445607-07:00","updated_at":"2025-10-16T10:02:59.718634-07:00","closed_at":"2025-10-15T15:50:18.462165-07:00"}
{"id":"test-9","title":"Test issue from integration test","description":"This is a test","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-15T15:50:31.591344-07:00","updated_at":"2025-10-16T10:02:59.719061-07:00","closed_at":"2025-10-15T15:50:31.608476-07:00"}
